"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright 2016 Hound Technology, Inc. All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// license that can be found in the LICENSE file.

/**
 * @module
 */


var _foreach = require("./foreach");

var _foreach2 = _interopRequireDefault(_foreach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents an individual event to send to Honeycomb.
 * @class
 */
var Event = function () {
  /**
   * @constructor
   * private
   */
  function Event(libhoney, fields, dyn_fields) {
    var _this = this;

    _classCallCheck(this, Event);

    this.data = Object.create(null);
    this.metadata = null;

    (0, _foreach2.default)(fields, function (v, k) {
      return _this.addField(k, v);
    });
    (0, _foreach2.default)(dyn_fields, function (v, k) {
      return _this.addField(k, v());
    });

    // stash this away for .send()
    this._libhoney = libhoney;
  }

  /**
   * adds a group of field->values to this event.
   * @param {Object|Map} data field->value mapping.
   * @returns {Event} this event.
   * @example <caption>using an object</caption>
   *   builder.newEvent()
   *     .add ({
   *       responseTime_ms: 100,
   *       httpStatusCode: 200
   *     });
   * @example <caption>using an ES2015 map</caption>
   *   let map = new Map();
   *   map.set("responseTime_ms", 100);
   *   map.set("httpStatusCode", 200);
   *   let event = honey.newEvent();
   *   event.add (map);
   */


  _createClass(Event, [{
    key: "add",
    value: function add(data) {
      var _this2 = this;

      (0, _foreach2.default)(data, function (v, k) {
        return _this2.addField(k, v);
      });
      return this;
    }

    /**
     * adds a single field->value mapping to this event.
     * @param {string} name
     * @param {any} val
     * @returns {Event} this event.
     * @example
     *   builder.newEvent()
     *     .addField("responseTime_ms", 100)
     *     .send();
     */

  }, {
    key: "addField",
    value: function addField(name, val) {
      if ((typeof val === "undefined" ? "undefined" : _typeof(val)) === "object") {
        // JS reports typeof == object for a lot of things that we don't need additional processing to handle
        if (val === null || val instanceof Boolean || val instanceof Number || val instanceof Date || val instanceof String) {
          // these are fine
        } else {
          val = JSON.stringify(val);
        }
      } else if (val == undefined) {
        val = null;
      }
      this.data[name] = val;
      return this;
    }

    /**
     * attaches data to an event that is not transmitted to honeycomb, but instead is available when checking the send responses.
     * @param {any} md
     * @returns {Event} this event.
     */

  }, {
    key: "addMetadata",
    value: function addMetadata(md) {
      this.metadata = md;
      return this;
    }

    /**
     * sends this event to honeycomb
     */

  }, {
    key: "send",
    value: function send() {
      this._libhoney.sendEvent(this);
    }
  }]);

  return Event;
}();

exports.default = Event;
;
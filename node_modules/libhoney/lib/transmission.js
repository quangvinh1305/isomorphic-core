"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright 2016 Hound Technology, Inc. All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// license that can be found in the LICENSE file.

/**
 * @module
 */


var _superagent = require("superagent");

var superagent = _interopRequireWildcard(_superagent);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var libhoney_js_version = "1.0.0-beta.2";

// default triggers for sending a batch:
var batchSizeTrigger = 100; // either when the eventQueue is > this length
var batchTimeTrigger = 100; // or it's been more than this many ms since the first push

var emptyResponseCallback = function emptyResponseCallback() {};

/**
 * @private
 */

var Transmission = function () {
  function Transmission(options) {
    _classCallCheck(this, Transmission);

    this._responseCallback = emptyResponseCallback;
    this._batchSizeTrigger = batchSizeTrigger;
    this._batchTimeTrigger = batchTimeTrigger;
    this._sendTimeoutId = -1;
    this._eventQueue = [];
    // Included for testing; to stub out randomness and verify that an event
    // was dropped.
    this._randomFn = Math.random;
    this._droppedCallback = emptyResponseCallback;

    if (typeof options.responseCallback == "function") {
      this._responseCallback = options.responseCallback;
    }
    if (typeof options.batchSizeTrigger == "number") {
      this._batchSizeTrigger = options.batchSizeTrigger;
    }
    if (typeof options.batchTimeTrigger == "number") {
      this._batchTimeTrigger = options.batchTimeTrigger;
    }
  }

  _createClass(Transmission, [{
    key: "sendEvent",
    value: function sendEvent(ev) {
      // bail early if we aren't sampling this event
      if (!this._shouldSendEvent(ev)) {
        this._droppedCallback();
        return;
      }

      this._eventQueue.push(ev);
      if (this._eventQueue.length > this._batchSizeTrigger) {
        this._sendBatch();
      } else {
        this._ensureSendTimeout();
      }
    }
  }, {
    key: "_sendBatch",
    value: function _sendBatch() {
      var _this = this;

      this._clearSendTimeout();

      var batch = this._eventQueue.splice(0, this._batchSizeTrigger);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = batch[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var ev = _step.value;

          var url = ev.apiHost + "/1/events/" + ev.dataset;
          var req = superagent.post(url);
          req.set('X-Hny-Team', ev.writeKey).set('X-Hny-Samplerate', ev.sampleRate).set('X-Hny-Event-Time', ev.timestamp.toISOString()).set('User-Agent', "libhoney-js/" + libhoney_js_version).type("json").send(ev.postData).end(function (err, res) {
            // call a callback here (in our init options) so it can be used both in the node, browser, and worker contexts.
            _this._responseCallback({ stuff: "goes here" }); // XXX(toshok)
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "_shouldSendEvent",
    value: function _shouldSendEvent(ev) {
      var sampleRate = ev.sampleRate;

      if (sampleRate <= 1) {
        return true;
      }
      return this._randomFn() < 1 / sampleRate;
    }
  }, {
    key: "_ensureSendTimeout",
    value: function _ensureSendTimeout() {
      var _this2 = this;

      if (this._sendTimeoutId === -1) {
        this._sendTimeoutId = setTimeout(function () {
          return _this2._sendBatch();
        }, this._batchTimeTrigger);
      }
    }
  }, {
    key: "_clearSendTimeout",
    value: function _clearSendTimeout() {
      if (this._sendTimeoutId !== -1) {
        clearTimeout(this._sendTimeoutId);
        this._sendTimeoutId = -1;
      }
    }
  }]);

  return Transmission;
}();

exports.default = Transmission;
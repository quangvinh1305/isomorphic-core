'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright 2016 Hound Technology, Inc. All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// license that can be found in the LICENSE file.

/**
 * @module
 */


var _event = require('./event');

var _event2 = _interopRequireDefault(_event);

var _foreach = require('./foreach');

var _foreach2 = _interopRequireDefault(_foreach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Allows piecemeal creation of events.
 * @class
 */
var Builder = function () {
  /**
   * @constructor
   * @private
   */
  function Builder(libhoney, fields, dyn_fields) {
    var _this = this;

    _classCallCheck(this, Builder);

    this._libhoney = libhoney;
    this._fields = Object.create(null);
    this._dyn_fields = Object.create(null);

    (0, _foreach2.default)(fields, function (v, k) {
      return _this.addField(k, v);
    });
    (0, _foreach2.default)(dyn_fields, function (v, k) {
      return _this.addDynamicField(k, v);
    });
  }

  /**
   * adds a group of field->values to the events created from this builder.
   * @param {Object|Map<string, any>} data field->value mapping.
   * @returns {Builder} this Builder instance.
   * @example <caption>using an object</caption>
   *   var honey = new libhoney();
   *   var builder = honey.newBuilder();
   *   builder.add ({
   *     responseTime_ms: 100,
   *     httpStatusCode: 200
   *   });
   * @example <caption>using an ES2015 map</caption>
   *   let map = new Map();
   *   map.set("responseTime_ms", 100);
   *   map.set("httpStatusCode", 200);
   *   builder.add (map);
   */


  _createClass(Builder, [{
    key: 'add',
    value: function add(data) {
      var _this2 = this;

      (0, _foreach2.default)(data, function (v, k) {
        return _this2.addField(k, v);
      });
      return this;
    }

    /**
     * adds a single field->value mapping to the events created from this builder.
     * @param {string} name
     * @param {any} val
     * @returns {Builder} this Builder instance.
     * @example
     *   builder.addField("responseTime_ms", 100);
     */

  }, {
    key: 'addField',
    value: function addField(name, val) {
      if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === "object") {
        // JS reports typeof == object for a lot of things that we don't need additional processing to handle
        if (val === null || val instanceof Boolean || val instanceof Number || val instanceof Date || val instanceof String) {
          // these are fine
        } else {
          val = JSON.stringify(val);
        }
      } else if (val == undefined) {
        val = null;
      }
      this._fields[name] = val;
      return this;
    }

    /**
     * adds a single field->dynamic value function, which is invoked to supply values when events are created from this builder.
     * @param {string} name the name of the field to add to events.
     * @param {function(): any} fn the function called to generate the value for this field.
     * @returns {Builder} this Builder instance.
     * @example
     *   builder.addDynamicField("process_heapUsed", () => process.memoryUsage().heapUsed);
     */

  }, {
    key: 'addDynamicField',
    value: function addDynamicField(name, fn) {
      this._dyn_fields[name] = fn;
    }

    /**
     * creates and sends an event, including all builder fields/dyn_fields, as well as anything in the optional data parameter.
     * @param {Object|Map<string, any>} [data] field->value mapping to add to the event sent.
     * @example <caption>empty sendNow</caption>
     *   builder.sendNow(); // sends just the data that has been added via add/addField/addDynamicField.
     * @example <caption>adding data at send-time</caption>
     *   builder.sendNow({
     *     additionalField: value
     *   });
     */

  }, {
    key: 'sendNow',
    value: function sendNow(data) {
      var ev = this.newEvent();
      ev.add(data);
      ev.send();
    }

    /**
     * creates and returns a new Event containing all fields/dyn_fields from this builder, that can be further fleshed out and sent on its own.
     * @returns {Event} an Event instance
     * @example <caption>adding data at send-time</caption>
     *   let ev = builder.newEvent();
     *   ev.addField("additionalField", value);
     *   ev.send();
     */

  }, {
    key: 'newEvent',
    value: function newEvent() {
      return new _event2.default(this._libhoney, this._fields, this._dyn_fields);
    }

    /**
     * creates and returns a clone of this builder, merged with fields and dyn_fields passed as arguments.
     * @param {Object|Map<string, any>} fields a field->value mapping to merge into the new builder.
     * @param {Object|Map<string, any>} dyn_fields a field->dynamic function mapping to merge into the new builder.
     * @returns {Builder} a Builder instance
     * @example <caption>no additional fields/dyn_field</caption>
     *   let anotherBuilder = builder.newBuilder();
     * @example <caption>additional fields/dyn_field</caption>
     *   let anotherBuilder = builder.newBuilder({ requestId },
     *                                           {
     *                                             process_heapUsed: () => process.memoryUsage().heapUsed
     *                                           });
     */

  }, {
    key: 'newBuilder',
    value: function newBuilder(fields, dyn_fields) {
      var b = new Builder(this._libhoney, this._fields, this._dyn_fields);

      (0, _foreach2.default)(fields, function (v, k) {
        return b.addField(k, v);
      });
      (0, _foreach2.default)(dyn_fields, function (v, k) {
        return b.addDynamicField(k, v);
      });

      return b;
    }
  }]);

  return Builder;
}();

exports.default = Builder;
;